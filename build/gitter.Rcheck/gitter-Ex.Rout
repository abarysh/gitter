
R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gitter"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "gitter-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('gitter')
gitter version 1.1 - quantification of pinned microbial cultures

Copyright (C) 2015 Omar Wagih

Type 'gitter.demo()' for a demo, '?gitter' for help 
or see http://gitter.ccbr.utoronto.ca for more details
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("gitter")
> ### * gitter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gitter
> ### Title: Process a single plate image
> ### Aliases: gitter
> ### Keywords: gitter image process sga single
> 
> ### ** Examples
> 
> # Read sample image
> f = system.file("extdata", "sample.jpg", package="gitter")
> # Process it
> dat = gitter(f)
2015-10-09 10:06:13:INFO::Reading image from: /Users/omarwagih/Development/gitter/build/gitter.Rcheck/gitter/extdata/sample.jpg
2015-10-09 10:06:13:INFO::Detected color image, extracting greyscale
2015-10-09 10:06:13:INFO::Running fast background correction
2015-10-09 10:06:13:INFO::Opening image with kernel size 31
2015-10-09 10:06:14:INFO::Iteration 0, threshold t = 0.14
2015-10-09 10:06:14:INFO::Iteration 1, threshold t = 0.15
2015-10-09 10:06:14:INFO::Iteration 2, threshold t = 0.15
2015-10-09 10:06:14:INFO::Optimal threshold t = 0.15
2015-10-09 10:06:14:INFO::Thresholding took 0.49 seconds
2015-10-09 10:06:14:INFO::Computing row sums
2015-10-09 10:06:14:INFO::Computing column sums
2015-10-09 10:06:14:INFO::Getting row peaks...
2015-10-09 10:06:14:INFO::Estimated window size: 26
2015-10-09 10:06:14:INFO::Getting column peaks...
2015-10-09 10:06:14:INFO::Estimated window size: 26
2015-10-09 10:06:14:INFO::Fitting bounds...
2015-10-09 10:06:16:INFO::Saved gridded image to: /Users/omarwagih/Development/gitter/build/gitter.Rcheck/gridded_sample.jpg
2015-10-09 10:06:16:INFO::Saved dat file to: /Users/omarwagih/Development/gitter/build/gitter.Rcheck/sample.jpg.dat
2015-10-09 10:06:16:INFO::Time elapsed: 2.575 seconds
> # View head of the results
> head(dat)
  row col size circularity flags
1   1   1  360      0.4091     C
2   1   2  193      0.2335     C
3   1   3  410      0.5955     C
4   1   4  377      0.4697     C
5   1   5  261      0.1836     C
6   1   6  374      0.1073   S,C
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gitter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gitter.batch")
> ### * gitter.batch
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gitter.batch
> ### Title: Process a batch set of plate images
> ### Aliases: gitter.batch
> ### Keywords: batch directory reference
> 
> ### ** Examples
> 
> # Processing image using reference image
> # This image would typically fail to process, since its missing several rows
> f = system.file("extdata", "sample_dead.jpg", package="gitter")
> # We will use this image to successfully process the above image
> f.ref = system.file("extdata", "sample.jpg", package="gitter")
> # Process
> gitter.batch(f, f.ref)
2015-10-09 10:06:16:INFO::Processing reference image: /Users/omarwagih/Development/gitter/build/gitter.Rcheck/gitter/extdata/sample.jpg
2015-10-09 10:06:16:INFO::Reading image from: /Users/omarwagih/Development/gitter/build/gitter.Rcheck/gitter/extdata/sample.jpg
2015-10-09 10:06:16:INFO::Detected color image, extracting greyscale
2015-10-09 10:06:16:INFO::Running fast background correction
2015-10-09 10:06:16:INFO::Opening image with kernel size 31
2015-10-09 10:06:16:INFO::Iteration 0, threshold t = 0.14
2015-10-09 10:06:16:INFO::Iteration 1, threshold t = 0.15
2015-10-09 10:06:16:INFO::Iteration 2, threshold t = 0.15
2015-10-09 10:06:16:INFO::Optimal threshold t = 0.15
2015-10-09 10:06:16:INFO::Thresholding took 0.34 seconds
2015-10-09 10:06:16:INFO::Computing row sums
2015-10-09 10:06:17:INFO::Computing column sums
2015-10-09 10:06:17:INFO::Getting row peaks...
2015-10-09 10:06:17:INFO::Estimated window size: 26
2015-10-09 10:06:17:INFO::Getting column peaks...
2015-10-09 10:06:17:INFO::Estimated window size: 26
2015-10-09 10:06:17:INFO::Fitting bounds...
2015-10-09 10:06:18:INFO::Time elapsed: 2.328 seconds
2015-10-09 10:06:18:INFO::Reading image from: /Users/omarwagih/Development/gitter/build/gitter.Rcheck/gitter/extdata/sample_dead.jpg
2015-10-09 10:06:18:INFO::Detected color image, extracting greyscale
2015-10-09 10:06:18:INFO::Non-reference plate, registering image to reference
2015-10-09 10:06:19:INFO::Running fast background correction
2015-10-09 10:06:19:INFO::Opening image with kernel size 31
2015-10-09 10:06:19:INFO::Iteration 0, threshold t = 0.14
2015-10-09 10:06:19:INFO::Iteration 1, threshold t = 0.15
2015-10-09 10:06:19:INFO::Iteration 2, threshold t = 0.15
2015-10-09 10:06:19:INFO::Optimal threshold t = 0.15
2015-10-09 10:06:19:INFO::Thresholding took 0.38 seconds
2015-10-09 10:06:19:INFO::Computing row sums
2015-10-09 10:06:19:INFO::Computing column sums
2015-10-09 10:06:19:INFO::Fitting bounds...
2015-10-09 10:06:21:INFO::Saved gridded image to: /Users/omarwagih/Development/gitter/build/gitter.Rcheck/gridded_sample_dead.jpg
2015-10-09 10:06:21:INFO::Saved dat file to: /Users/omarwagih/Development/gitter/build/gitter.Rcheck/sample_dead.jpg.dat
2015-10-09 10:06:21:INFO::Time elapsed: 1.905 seconds
> 
> # Remember: output files by default are saved to your working directory
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gitter.batch", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gitter.demo")
> ### * gitter.demo
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gitter.demo
> ### Title: Run a demo of gitter
> ### Aliases: gitter.demo
> 
> ### ** Examples
> 
> # gitter.demo()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gitter.demo", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gitter.read")
> ### * gitter.read
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gitter.read
> ### Title: Read in a data file as a 'gitter' data object.
> ### Aliases: gitter.read
> ### Keywords: dat file gitter read
> 
> ### ** Examples
> 
> # Get dat file path
> f = system.file("extdata", "sample.jpg.dat", package="gitter")
> # Read in path as a gitter data object
> g = gitter.read(f)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gitter.read", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plate.warnings")
> ### * plate.warnings
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plate.warnings
> ### Title: Show any plate-level warnings associated with a 'gitter' data
> ###   object
> ### Aliases: plate.warnings
> ### Keywords: error plate warning
> 
> ### ** Examples
> 
> # dat = gitter("/path/to/image")
> # plate.warnings(dat)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plate.warnings", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.gitter")
> ### * plot.gitter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.gitter
> ### Title: Plot a gitter dat file
> ### Aliases: plot.gitter
> ### Keywords: bubble display heatmap plot visualize
> 
> ### ** Examples
> 
> f = system.file("extdata", "sample.jpg.dat", package="gitter")
> # Read in path as a gitter data object
> g = gitter.read(f)
> # Plot a heatmap
> plot(g, type="heatmap")
Warning: Non Lab interpolation is deprecated
> # Show a bubble plot
> plot(g, type="bubble", low="black", high="red")
Warning: Non Lab interpolation is deprecated
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.gitter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.gitter")
> ### * summary.gitter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.gitter
> ### Title: View the summary of a gitter data file
> ### Aliases: summary.gitter
> ### Keywords: error plate warning
> 
> ### ** Examples
> 
> # dat = gitter("/path/to/image")
> # summary(dat)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.gitter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  8.607 0.502 9.149 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
